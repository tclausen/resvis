<template>
  <v-container fluid>
    <v-layout row wrap>
      <v-flex xs2></v-flex>
      <v-flex xs8 mt-5>
        <v-layout column>
          <v-flex xs12 class="text-xs-center">
            <v-card>
              <v-card-text>
                <v-layout row>
                  <v-flex xs12>
                    <div class="headline">{{getResName(visit.restaurantid)}}</div>
                    <div>{{formatTime(visit.time)}}</div>
                    <div v-if="visit.with">with {{visit.with}}</div>
                    <v-layout row>
                      <v-flex xs12>
                        <v-btn flat color="orange" @click="editVisit(visit)">Edit</v-btn>
                        <v-btn flat color="orange" @click="removeVisit(visit)">Remove</v-btn>
                      </v-flex>
                    </v-layout >
                  </v-flex>
                </v-layout>
              </v-card-text>
            </v-card>
          </v-flex>
          <v-flex class="text-xs-center" mt-3>
            <v-alert color="error" :value="error">
              {{error}}
            </v-alert>
          </v-flex>
        </v-layout>
        <v-layout row wrap>
          <v-flex xs12 mt-5 v-for="p in getPicturesWithPath(visit.pictures)" :key="p">
            <v-card>
              <v-card-media :src="p" height="400px">
              </v-card-media>
              <v-card-text>
                Comment
              </v-card-text>
              <v-card-actions>
                <v-btn icon>
                  <v-icon>favorite</v-icon>
                </v-btn>
                <v-btn flat>Edit comment</v-btn>
                <v-btn flat>Remove</v-btn>
              </v-card-actions>
            </v-card>
          </v-flex>
        </v-layout>
      </v-flex>
      <v-flex xs2></v-flex>
    </v-layout>
  </v-container>
</template>

<script>
import axios from 'axios'
export default {
  components: {
  },
  data () {
    return {
      visit: {time: 0, with: "test", restaurantid: 0},
      error: ""
    }
  },
  methods: {
    formatTime(t) {
      var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      var date = new Date(t);
      return date.toLocaleDateString("dk-DK",options)
    },
    getResName(id) {
      if(id == undefined) {
        return "Undefined id"
      }
      console.log("getresname id = ", id)
      var rs = this.$store.state.user.restaurants
      console.log("ress = ", rs)
      if(rs != undefined && id in rs)
        return rs[id].name
      return "Unknown"
    },
    getPicturesWithPath(pictures) {
      if(pictures == undefined) {
        return []
      }
      var ps = pictures.map(function(p) { return "/static/"+p }) 
      return ps
    },
    editVisit(visit) {
      console.log("Edit visit")
      console.log(visit)
      this.error = "Edit visit not implemented yet"
    },
    removeVisit(visit) {
      console.log("Remove visit")
      console.log(visit)
      if(confirm('Are you sure you want to delete visit to '+this.getResName(visit.restaurantid)+'?')) {
        let config = { headers: { "Token": this.$store.state.token } }
        axios.get('http://tocsig.ddns.net:3000/api/resvis/delete/'+visit.id, config)
          .then((resp) => {
            //console.log("resp: " + resp)
            console.log("id " + visit.id) 
            this.error = ""
            this.$store.commit("loadUser")
            this.$router.push("/")
          })
          .catch((err) => {
            console.log(err.response)
            this.error = "Can't delete restaurant visit: " + err.response
          });
      }
    }
  },
  created: function() {
    console.log("ResVisDetail: Created called")
    console.log(this.$store.state.user)
    console.log("id is", this.$route.params.id)
    if (this.$route.params.id != undefined) {
      this.visit = this.$store.state.user.resvisits[this.$route.params.id]
    }
  },
  watch: {
    '$route' (to, from) {
      console.log("Watch called")
      console.log(this.$store.state.user)
      console.log("id is", this.$route.params.id)
      this.visit = this.$store.state.user.resvisits[this.$route.params.id]
    }
  },
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
</style>
